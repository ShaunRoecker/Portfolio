{
  
    
        "post0": {
            "title": "Biodiversity in National Parks",
            "content": "import pandas as pd from matplotlib import pyplot as plt import seaborn as sns from scipy.stats import chi2_contingency from itertools import chain import string import re . species . The species_info.csv contains information on the different species in the National Parks. . category - The category of taxonomy for each species | scientific_name - The scientific name of each species | common_names - The common names of each species | conservation_status - The species conservation status | . species = pd.read_csv(&quot;species_info.csv&quot;) species.head() . category scientific_name common_names conservation_status . 0 Mammal | Clethrionomys gapperi gapperi | Gapper&#39;s Red-Backed Vole | NaN | . 1 Mammal | Bos bison | American Bison, Bison | NaN | . 2 Mammal | Bos taurus | Aurochs, Aurochs, Domestic Cattle (Feral), Dom... | NaN | . 3 Mammal | Ovis aries | Domestic Sheep, Mouflon, Red Sheep, Sheep (Feral) | NaN | . 4 Mammal | Cervus elaphus | Wapiti Or Elk | NaN | . observations . The Observations.csv contains information from recorded sightings of different species throughout the national parks in the past 7 days. The columns included are: . scientific_name - The scientific name of each species | park_name - The name of the national park | observations - The number of observations in the past 7 days | . observations = pd.read_csv(&quot;observations.csv&quot;) observations.head() . scientific_name park_name observations . 0 Vicia benghalensis | Great Smoky Mountains National Park | 68 | . 1 Neovison vison | Great Smoky Mountains National Park | 77 | . 2 Prunus subcordata | Yosemite National Park | 138 | . 3 Abutilon theophrasti | Bryce National Park | 84 | . 4 Githopsis specularioides | Great Smoky Mountains National Park | 85 | . print(f&quot;Species Dataframe Shape: {species.shape}&quot;) print(f&quot;Observations Dataframe Shape: {observations.shape}&quot;) print(f&quot;Number of Species: {species.scientific_name.nunique()}&quot;) print(f&quot;Number of Species Categories: {species.category.nunique()}&quot;) print(f&quot;Species Categories: {species.category.unique()}&quot;) . Species Dataframe Shape: (5824, 4) Observations Dataframe Shape: (23296, 3) Number of Species: 5541 Number of Species Categories: 7 Species Categories: [&#39;Mammal&#39; &#39;Bird&#39; &#39;Reptile&#39; &#39;Amphibian&#39; &#39;Fish&#39; &#39;Vascular Plant&#39; &#39;Nonvascular Plant&#39;] . animal_species = species[(species[&quot;category&quot;] != &quot;Vascular Plant&quot;) &amp; (species[&quot;category&quot;] != &quot;Nonvascular Plant&quot;)].copy(deep=False) print(&quot;Number of Species By Category:&quot;) animal_species[&quot;category&quot;].value_counts() . Number of Species By Category: . Bird 521 Mammal 214 Fish 127 Amphibian 80 Reptile 79 Name: category, dtype: int64 . animal_species.head() . category scientific_name common_names conservation_status . 0 Mammal | Clethrionomys gapperi gapperi | Gapper&#39;s Red-Backed Vole | NaN | . 1 Mammal | Bos bison | American Bison, Bison | NaN | . 2 Mammal | Bos taurus | Aurochs, Aurochs, Domestic Cattle (Feral), Dom... | NaN | . 3 Mammal | Ovis aries | Domestic Sheep, Mouflon, Red Sheep, Sheep (Feral) | NaN | . 4 Mammal | Cervus elaphus | Wapiti Or Elk | NaN | . print(f&quot;Number of Conservation Statuses: {animal_species.conservation_status.nunique()}&quot;) print(f&quot;Unique Conservation Statuses: {animal_species.conservation_status.unique()}&quot;) . Number of Conservation Statuses: 4 Unique Conservation Statuses: [nan &#39;Species of Concern&#39; &#39;Endangered&#39; &#39;Threatened&#39; &#39;In Recovery&#39;] . print(f&quot;NA values:{animal_species.conservation_status.isna().sum()}&quot;) print(animal_species.groupby(&quot;conservation_status&quot;).size()) . NA values:881 conservation_status Endangered 15 In Recovery 4 Species of Concern 113 Threatened 8 dtype: int64 . print(f&quot;Number of Parks: {observations.park_name.nunique()}&quot;) print(f&quot;Park Names: {observations.park_name.unique()}&quot;) . Number of Parks: 4 Park Names: [&#39;Great Smoky Mountains National Park&#39; &#39;Yosemite National Park&#39; &#39;Bryce National Park&#39; &#39;Yellowstone National Park&#39;] . animal_species.fillna(&quot;Least Concern&quot;, inplace=True) animal_species.groupby(&quot;conservation_status&quot;).size() . conservation_status Endangered 15 In Recovery 4 Least Concern 881 Species of Concern 113 Threatened 8 dtype: int64 . conservation = animal_species[animal_species[&quot;conservation_status&quot;] != &quot;Least Concern&quot;] .groupby([&quot;conservation_status&quot;, &quot;category&quot;])[&#39;scientific_name&#39;] .count() .unstack() conservation . category Amphibian Bird Fish Mammal Reptile . conservation_status . Endangered 1.0 | 4.0 | 3.0 | 7.0 | NaN | . In Recovery NaN | 3.0 | NaN | 1.0 | NaN | . Species of Concern 4.0 | 72.0 | 4.0 | 28.0 | 5.0 | . Threatened 2.0 | NaN | 4.0 | 2.0 | NaN | . sns.set(style=&quot;darkgrid&quot;) ax = conservation.plot(kind = &quot;bar&quot;, figsize=(10,8), stacked=True) ax.set_xlabel(&quot;Conservation Status&quot;, fontsize=14) ax.set_ylabel(&quot;Number of Species&quot;, fontsize=14) plt.title(&quot;Species by Conservation Status &amp; Class&quot;, fontsize=16) plt.legend(title=&quot;Animal Class&quot;, loc=&quot;upper right&quot;) plt.xticks(rotation=0) plt.show() . animal_species[&#39;protected&#39;] = animal_species[&quot;conservation_status&quot;] != &#39;Least Concern&#39; animal_species[5:10] . category scientific_name common_names conservation_status protected . 5 Mammal | Odocoileus virginianus | White-Tailed Deer | Least Concern | False | . 6 Mammal | Sus scrofa | Feral Hog, Wild Pig | Least Concern | False | . 7 Mammal | Canis latrans | Coyote | Species of Concern | True | . 8 Mammal | Canis lupus | Gray Wolf | Endangered | True | . 9 Mammal | Canis rufus | Red Wolf | Endangered | True | . class_protected_counts = animal_species.groupby([&#39;category&#39;, &#39;protected&#39;]).scientific_name.nunique() .reset_index().pivot(columns=&#39;protected&#39;, index=&#39;category&#39;, values=&#39;scientific_name&#39;).reset_index() class_protected_counts.columns = [&#39;category&#39;, &#39;not_protected&#39;, &#39;protected&#39;] class_protected_counts[&#39;percent_protected&#39;] = class_protected_counts.protected / (class_protected_counts.protected + class_protected_counts.not_protected) * 100 class_protected_counts . category not_protected protected percent_protected . 0 Amphibian | 72 | 7 | 8.860759 | . 1 Bird | 413 | 75 | 15.368852 | . 2 Fish | 115 | 11 | 8.730159 | . 3 Mammal | 146 | 30 | 17.045455 | . 4 Reptile | 73 | 5 | 6.410256 | . Statistical Significance . table = pd.crosstab(animal_species.protected, animal_species.category) chi2, pval, dof, expected = chi2_contingency(table) print(pval) . 0.01788871996181953 . The results from the chi-squared test gave a p-value of 0.018, which is below a significance threshold of 0.05. Therefore, it can be concluded that there is a significant relationship between the animal class and it&#39;s protected status. . Reptile Species in the National Parks . def remove_punctuations(text): for punctuation in string.punctuation: text = text.replace(punctuation, &#39;&#39;) return text common_Names = animal_species[animal_species.category == &quot;Reptile&quot;] .common_names .apply(remove_punctuations) .str.split().tolist() common_Names[:6] . [[&#39;Eastern&#39;, &#39;Slender&#39;, &#39;Glass&#39;, &#39;Lizard&#39;], [&#39;Worm&#39;, &#39;Snakes&#39;, &#39;Wormsnakes&#39;], [&#39;Eastern&#39;, &#39;Worm&#39;, &#39;Snake&#39;], [&#39;Midwest&#39;, &#39;Worm&#39;, &#39;Snake&#39;], [&#39;Northern&#39;, &#39;Scarlet&#39;, &#39;Snake&#39;], [&#39;Northern&#39;, &#39;Black&#39;, &#39;Racer&#39;]] . cleanRows = [] for index in common_Names: index = list(dict.fromkeys(index)) cleanRows.append(index) cleanRows[:6] . [[&#39;Eastern&#39;, &#39;Slender&#39;, &#39;Glass&#39;, &#39;Lizard&#39;], [&#39;Worm&#39;, &#39;Snakes&#39;, &#39;Wormsnakes&#39;], [&#39;Eastern&#39;, &#39;Worm&#39;, &#39;Snake&#39;], [&#39;Midwest&#39;, &#39;Worm&#39;, &#39;Snake&#39;], [&#39;Northern&#39;, &#39;Scarlet&#39;, &#39;Snake&#39;], [&#39;Northern&#39;, &#39;Black&#39;, &#39;Racer&#39;]] . res = list(chain.from_iterable(i if isinstance(i, list) else [i] for i in cleanRows)) res[:6] . [&#39;Eastern&#39;, &#39;Slender&#39;, &#39;Glass&#39;, &#39;Lizard&#39;, &#39;Worm&#39;, &#39;Snakes&#39;] . words_counted = [] for i in res: x = res.count(i) words_counted.append((i,x)) pd.DataFrame(set(words_counted), columns =[&#39;Word&#39;, &#39;Count&#39;]).sort_values(&quot;Count&quot;, ascending = False).head(10) . Word Count . 14 Snake | 27 | . 65 Northern | 15 | . 7 Turtle | 11 | . 45 Eastern | 11 | . 88 Lizard | 9 | . 15 Skink | 7 | . 74 Kingsnake | 6 | . 23 Garter | 5 | . 21 Western | 5 | . 54 Racer | 4 | . animal_species[&#39;snake&#39;] = animal_species.common_names.str.contains(r&quot; bSnake b&quot;, regex = True) animal_species[&#39;lizard&#39;] = animal_species.common_names.str.contains(r&quot; bLizard b&quot;, regex = True) animal_species[&#39;turtle&#39;] = animal_species.common_names.str.contains(r&quot; bTurtle b&quot;, regex = True) animal_species[animal_species.turtle] . category scientific_name common_names conservation_status protected snake lizard turtle . 399 Reptile | Chelydra serpentina serpentina | Common Snapping Turtle | Least Concern | False | False | False | True | . 400 Reptile | Chrysemys picta marginata | Midland Painted Turtle | Least Concern | False | False | False | True | . 401 Reptile | Chrysemys picta picta | Eastern Painted Turtle | Least Concern | False | False | False | True | . 402 Reptile | Clemmys muhlenbergii | Bog Turtle | Least Concern | False | False | False | True | . 403 Reptile | Graptemys geographica | Common Map Turtle, Map Turtle | Least Concern | False | False | False | True | . 404 Reptile | Graptemys ouachitensis | Ouachita Map Turtle | Least Concern | False | False | False | True | . 405 Reptile | Terrapene carolina carolina | Eastern Box Turtle | Least Concern | False | False | False | True | . 408 Reptile | Sternotherus minor peltifer | Stripeneck Musk Turtle, Stripe-Necked Musk Turtle | Least Concern | False | False | False | True | . 409 Reptile | Sternotherus odoratus | Common Musk Turtle | Least Concern | False | False | False | True | . 410 Reptile | Apalone spinifera spinifera | Eastern Spiny Softshell, Northern Spiny Softsh... | Least Concern | False | False | False | True | . 3263 Reptile | Chrysemys picta bellii | Western Painted Turtle | Least Concern | False | False | False | True | . snake_observations = observations.merge(animal_species[animal_species.snake]) lizard_observations = observations.merge(animal_species[animal_species.lizard]) turtle_observations = observations.merge(animal_species[animal_species.turtle]) . park_snake_obs = snake_observations.groupby([&quot;park_name&quot;,&quot;protected&quot;]).observations.sum().reset_index() park_lizard_obs = lizard_observations.groupby([&quot;park_name&quot;,&quot;protected&quot;]).observations.sum().reset_index() park_turtle_obs = turtle_observations.groupby([&quot;park_name&quot;,&quot;protected&quot;]).observations.sum().reset_index() . plt.figure(figsize=(12, 22)) ax1 = plt.subplot(3,1,1) sns.barplot(x=park_snake_obs.park_name, y= park_snake_obs.observations, hue=park_snake_obs.protected) plt.xlabel(&#39;National Parks&#39;, fontsize=14) plt.ylabel(&#39;Number of Observations&#39;, fontsize=14) plt.title(&#39;Observations of Snakes by National Park per Week&#39;, fontsize=16) ax2 = plt.subplot(3,1,2) sns.barplot(x=park_lizard_obs.park_name, y= park_lizard_obs.observations, hue=park_lizard_obs.protected) plt.xlabel(&#39;National Parks&#39;, fontsize=14) plt.ylabel(&#39;Number of Observations&#39;, fontsize=14) plt.title(&#39;Observations of Lizards by National Park per Week&#39;, fontsize=16) ax3 = plt.subplot(3,1,3) sns.barplot(x=park_turtle_obs.park_name, y= park_turtle_obs.observations, hue=park_turtle_obs.protected) plt.xlabel(&#39;National Parks&#39;, fontsize=14) plt.ylabel(&#39;Number of Observations&#39;, fontsize=14) plt.title(&#39;Observations of Turtles by National Park per Week&#39;, fontsize=16) plt.show() . Conclusions . The project was able to make several data visualizations and inferences about the various animal species in the four National Parks with data on observations. . This project was also able to answer some of the questions first posed in the beginning: . What is the distribution of conservation status for animal species? The vast majority of species were not part of conservation. | . | Are certain types of species more likely to be endangered? Mammals and Birds had the highest percentage of being protected as opposed to other animal classes. | . | Are the differences between species and their conservation status significant? After running a chi-squared statistical test, it was concluded that there is a significant difference between animal class and conservation status. | . | .",
            "url": "https://shaunroecker.github.io/portfolio/2022/01/26/Portfolio(EDA1).html",
            "relUrl": "/2022/01/26/Portfolio(EDA1).html",
            "date": " • Jan 26, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://shaunroecker.github.io/portfolio/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://shaunroecker.github.io/portfolio/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://shaunroecker.github.io/portfolio/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "",
          "content": "Projects .",
          "url": "https://shaunroecker.github.io/portfolio/",
          "relUrl": "/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://shaunroecker.github.io/portfolio/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}